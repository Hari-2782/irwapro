# # import pandas as pd
# # import streamlit as st
# # import pickle
# # import requests
# # import time
# # import sqlite3
# # import bcrypt
# # st.markdown("""
# #     <style>
# #     @font-face {
# #         font-family: 'Source Sans Pro';
# #         src: url('static/fonts/SourceSansPro-Italic.woff2') format('woff2');
# #         font-style: italic;
# #     }
# #     @font-face {
# #         font-family: 'Source Sans Pro';
# #         src: url('static/fonts/SourceSansPro-SemiBoldItalic.woff2') format('woff2');
# #         font-weight: 600;
# #         font-style: italic;
# #     }
# #     body {
# #         font-family: 'Source Sans Pro', sans-serif;
# #     }
# #     </style>
# # """, unsafe_allow_html=True)

# # # Utility Functions
# # def format_list(data):
# #     """Converts lists of strings to a proper string representation."""
# #     if isinstance(data, list):
# #         return ' '.join(data)
# #     return data

# # def format_rating(rating):
# #     """Handles movie rating as a float number."""
# #     if isinstance(rating, list):
# #         try:
# #             return float(''.join(rating))
# #         except ValueError:
# #             return 0.0
# #     return rating

# # def format_runtime(runtime):
# #     """Handles runtime as an integer."""
# #     if isinstance(runtime, list):
# #         try:
# #             return int(''.join(runtime).split('.')[0])
# #         except ValueError:
# #             return 0
# #     return runtime

# # def format_date(release_date):
# #     """Handles release date formatting."""
# #     if isinstance(release_date, list):
# #         return ''.join(release_date)
# #     return release_date

# # def format_description(description):
# #     """Handles movie description formatting."""
# #     if isinstance(description, list):
# #         return ' '.join(description)
# #     return description

# # def simulate_loading():
# #     """Simulates a loading process."""
# #     with st.spinner('Fetching recommendations...'):
# #         time.sleep(1.5)
# #     st.success('Recommendations fetched successfully!')

# # # Create a connection to the database
# # conn = sqlite3.connect('movie_recommendation.db', check_same_thread=False)
# # c = conn.cursor()

# # # Create users and watch_history tables if not exist
# # c.execute('''CREATE TABLE IF NOT EXISTS users (
# #                 user_id INTEGER PRIMARY KEY AUTOINCREMENT,
# #                 username TEXT UNIQUE,
# #                 password TEXT)''')

# # c.execute('''CREATE TABLE IF NOT EXISTS watch_history (
# #                 user_id INTEGER,
# #                 movie_id INTEGER,
# #                 FOREIGN KEY(user_id) REFERENCES users(user_id))''')
# # conn.commit()

# # # Function to fetch poster
# # def fetch_poster(movie_id):
# #     response = requests.get(f'https://api.themoviedb.org/3/movie/{movie_id}?api_key=020b311fe0559698373a16008dc6a672&language=en-US')
# #     data = response.json()
# #     return "https://image.tmdb.org/t/p/w500/" + data['poster_path']

# # # Function to recommend movies
# # def recommend(movie):
# #     movie_index = movies[movies['title'] == movie].index[0]
# #     distances = similarity[movie_index]
# #     movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]

# #     recommended_movies = []
# #     recommended_movies_posters = []
# #     for x in movies_list:
# #         movie_id = movies.iloc[x[0]].movie_id
# #         recommended_movies.append(movies.iloc[x[0]].title)
# #         recommended_movies_posters.append(fetch_poster(movie_id))
# #     return recommended_movies, recommended_movies_posters

# # # Function to get recommendations based on user history
# # def recommend_based_on_history(user_id):
# #     watched_movie_ids = [row[0] for row in c.execute('SELECT movie_id FROM watch_history WHERE user_id=?', (user_id,))]
# #     if not watched_movie_ids:
# #         return [], []

# #     recommended_movies, recommended_movies_posters = [], []
# #     for movie_id in watched_movie_ids:
# #         movie_title = movies[movies['movie_id'] == movie_id]['title'].values[0]
# #         names, posters = recommend(movie_title)
# #         recommended_movies.extend(names)
# #         recommended_movies_posters.extend(posters)
    
# #     return recommended_movies[:5], recommended_movies_posters[:5]

# # # Function to hash password
# # def hash_password(password):
# #     return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

# # # Function to check password
# # def check_password(hashed_password, user_password):
# #     return bcrypt.checkpw(user_password.encode('utf-8'), hashed_password)

# # # Load movies and similarity matrices
# # movies_dict = pickle.load(open('movie_dict_4.pkl', 'rb'))
# # movies = pd.DataFrame(movies_dict)
# # similarity = pickle.load(open('similarity_4.pkl', 'rb'))

# # # Streamlit UI components
# # st.title('üé¨ Welcome to Bala cinema!üçø')
# # st.markdown('<p style="font-size:20px; font-style: italic;">Discover your next movie adventure with <strong>Bala Cinema</strong></p>', unsafe_allow_html=True)
# # st.write("A movie recommendation system by Bala Cinema")

# # # Login/Registration
# # auth_choice = st.selectbox("Login / Register", ["Login", "Register"])
# # username = st.text_input("Username")
# # password = st.text_input("Password", type='password')
# # user_id = None

# # if auth_choice == "Register":
# #     if st.button("Register"):
# #         hashed_pw = hash_password(password)
# #         try:
# #             c.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_pw))
# #             conn.commit()
# #             st.success("User registered successfully! Please log in.")
# #         except sqlite3.IntegrityError:
# #             st.error("Username already exists!")
# # elif auth_choice == "Login":
# #     if st.button("Login"):
# #         user = c.execute("SELECT * FROM users WHERE username=?", (username,)).fetchone()
# #         if user and check_password(user[2], password):
# #             st.success("Login successful!")
# #             user_id = user[0]
# #         else:
# #             st.error("Invalid username or password!")

# # # Show recommendations based on history if logged in
# # if user_id:
# #     st.write("Welcome back! Based on your watch history, you might like these:")
# #     names, posters = recommend_based_on_history(user_id)
# #     if names:
# #         for idx, (name, poster) in enumerate(zip(names, posters), start=1):
# #             with st.container():
# #                 col1, col2 = st.columns([1, 3])
# #                 with col1:
# #                     st.image(poster, width=150)
# #                 with col2:
# #                     movie_info = movies[movies['title'] == name].iloc[0]
# #                     runtime = format_runtime(movie_info['runtime'])
# #                     runtime_hours = int(runtime // 60)
# #                     runtime_minutes = int(runtime % 60)

# #                     st.markdown(f"**MOVIE {idx}:** {format_list(movie_info['title'])}")
# #                     st.markdown(f"**DIRECTED BY:** {format_list(movie_info['crew'])}")
# #                     st.markdown(f"**CAST:** {', '.join(movie_info['cast'])}")
# #                     st.markdown(f"**MOVIE RATING:** {format_rating(movie_info['vote_average'])}")
# #                     st.markdown(f"**GENRE:** {', '.join(movie_info['genres'])}")
# #                     st.markdown(f"**RUNTIME:** {runtime_hours} hours {runtime_minutes} minutes")
# #                     st.markdown(f"**RELEASE DATE:** {format_date(movie_info['release_date'])}")
# #                     st.markdown(f"**ABOUT:** {format_description(movie_info['overview'])}")

# #     else:
# #         st.write("No watch history found. Search for a movie to get recommendations!")

# #     # Select a movie for recommendations
# #     selected_movie_name = st.selectbox(
# #         'Choose a reference movie to get started:',
# #         movies['title'].values
# #     )

# #     if st.button('Show me recommendations!'):
# #         simulate_loading()
# #         names, posters = recommend(selected_movie_name)
# #         st.write('Here are some movies you might enjoy:')
# #         st.markdown(f'### Recommended Movies based on *{selected_movie_name}*:')

# #         for idx, (name, poster) in enumerate(zip(names, posters), start=1):
# #             with st.container():
# #                 col1, col2 = st.columns([1, 3])
# #                 with col1:
# #                     st.image(poster, width=150)
# #                 with col2:
# #                     movie_info = movies[movies['title'] == name].iloc[0]
# #                     runtime = format_runtime(movie_info['runtime'])
# #                     runtime_hours = int(runtime // 60)
# #                     runtime_minutes = int(runtime % 60)

# #                     st.markdown(f"**MOVIE {idx}:** {format_list(movie_info['title'])}")
# #                     st.markdown(f"**DIRECTED BY:** {format_list(movie_info['crew'])}")
# #                     st.markdown(f"**CAST:** {', '.join(movie_info['cast'])}")
# #                     st.markdown(f"**MOVIE RATING:** {format_rating(movie_info['vote_average'])}")
# #                     st.markdown(f"**GENRE:** {', '.join(movie_info['genres'])}")
# #                     st.markdown(f"**RUNTIME:** {runtime_hours} hours {runtime_minutes} minutes")
# #                     st.markdown(f"**RELEASE DATE:** {format_date(movie_info['release_date'])}")
# #                     st.markdown(f"**ABOUT:** {format_description(movie_info['overview'])}")

# #     # Add movie to user history
# #     if st.button("Add to Watch History"):
# #         movie_id = movies[movies['title'] == selected_movie_name].iloc[0].movie_id
# #         try:
# #             c.execute("INSERT INTO watch_history (user_id, movie_id) VALUES (?, ?)", (user_id, movie_id))
# #             conn.commit()
# #             st.success(f"{selected_movie_name} added to your watch history!")
# #         except sqlite3.IntegrityError:
# #             st.error("Movie already in watch history!")

# # # Close the database connection after app execution
# # try:
# #     # Your main app code here...
# #     pass
# # finally:
# #     conn.close()
# after

# import pandas as pd
# import streamlit as st
# import pickle
# import requests
# import time
# import sqlite3
# import bcrypt

# # Create a connection to the database
# conn = sqlite3.connect('movie_recommendation.db', check_same_thread=False)
# c = conn.cursor()

# # Create users, watch_history, and ratings tables if they do not exist
# c.execute('''CREATE TABLE IF NOT EXISTS users (
#                 user_id INTEGER PRIMARY KEY AUTOINCREMENT,
#                 username TEXT UNIQUE,
#                 password TEXT)''')

# c.execute('''CREATE TABLE IF NOT EXISTS watch_history (
#                 user_id INTEGER,
#                 movie_id INTEGER,
#                 FOREIGN KEY(user_id) REFERENCES users(user_id))''')

# c.execute('''CREATE TABLE IF NOT EXISTS ratings (
#                 user_id INTEGER,
#                 movie_id INTEGER,
#                 rating REAL,
#                 FOREIGN KEY(user_id) REFERENCES users(user_id),
#                 FOREIGN KEY(movie_id) REFERENCES watch_history(movie_id))''')
# conn.commit()

# # Function to fetch movie poster
# def fetch_poster(movie_id):
#     response = requests.get(f'https://api.themoviedb.org/3/movie/{movie_id}?api_key=020b311fe0559698373a16008dc6a672&language=en-US')
#     data = response.json()
#     return "https://image.tmdb.org/t/p/w500/" + data['poster_path']

# # Function to recommend movies
# def recommend(movie):
#     movie_index = movies[movies['title'] == movie].index[0]
#     distances = similarity[movie_index]
#     movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]

#     recommended_movies = []
#     recommended_movies_posters = []
#     for x in movies_list:
#         movie_id = movies.iloc[x[0]].movie_id
#         recommended_movies.append(movies.iloc[x[0]].title)
#         recommended_movies_posters.append(fetch_poster(movie_id))
#     return recommended_movies, recommended_movies_posters

# # Function to get recommendations based on user history
# def recommend_based_on_history(user_id):
#     watched_movie_ids = []
#     for row in c.execute('SELECT movie_id FROM watch_history WHERE user_id=?', (user_id,)):
#         try:
#             # Check if the row contains bytes and decode
#             movie_id = row[0]
#             if isinstance(movie_id, bytes):
#                 movie_id = movie_id.decode('utf-8')  # Decode bytes to string
#             watched_movie_ids.append(int(movie_id))  # Convert to integer
#         except (ValueError, TypeError) as e:
#             st.warning(f"Could not convert movie_id: {row[0]} - Error: {str(e)}")

#     if not watched_movie_ids:
#         return [], []

#     recommended_movies, recommended_movies_posters = [], []
#     for movie_id in watched_movie_ids:
#         # Check if the movie_id exists in the movies DataFrame
#         if movie_id in movies['movie_id'].values:
#             movie_title = movies[movies['movie_id'] == movie_id]['title'].values[0]
#             names, posters = recommend(movie_title)
#             recommended_movies.extend(names)
#             recommended_movies_posters.extend(posters)
#         else:
#             st.warning(f"Movie ID {movie_id} not found in movie database.")

#     return recommended_movies[:5], recommended_movies_posters[:5]

# # Function to add user rating
# def add_rating(user_id, movie_id, rating):
#     c.execute("INSERT INTO ratings (user_id, movie_id, rating) VALUES (?, ?, ?)", (user_id, movie_id, rating))
#     conn.commit()

# # Hybrid recommendations function
# def hybrid_recommend(movie_title, user_id):
#     # Get content-based recommendations
#     recommended_movies, recommended_movies_posters = recommend(movie_title)
    
#     # Get user-based collaborative recommendations
#     watched_movies = []
#     for row in c.execute('SELECT movie_id FROM watch_history WHERE user_id=?', (user_id,)):
#         try:
#             movie_id = row[0]
#             if isinstance(movie_id, bytes):
#                 movie_id = movie_id.decode('utf-8')
#             watched_movies.append(int(movie_id))
#         except (ValueError, TypeError) as e:
#             st.warning(f"Could not convert movie_id: {row[0]} - Error: {str(e)}")

#     if watched_movies:
#         additional_recommendations = []
#         for movie_id in watched_movies:
#             names, posters = recommend_based_on_history(user_id)
#             additional_recommendations.extend(names)

#         # Avoid duplicates and return final recommendations
#         combined_recommendations = list(set(recommended_movies + additional_recommendations))
#         combined_posters = list(set(recommended_movies_posters + [fetch_poster(movies[movies['title'] == m]['movie_id'].values[0]) for m in additional_recommendations]))
#         return combined_recommendations[:5], combined_posters[:5]

#     return recommended_movies, recommended_movies_posters

# # Load movies and similarity matrices
# movies_dict = pickle.load(open('movie_dict_4.pkl', 'rb'))
# movies = pd.DataFrame(movies_dict)
# similarity = pickle.load(open('similarity_4.pkl', 'rb'))

# # Streamlit UI components
# st.title('üé¨ Welcome to Bala Cinema! üçø')
# st.markdown('<p style="font-size:20px; font-style: italic;">Discover your next movie adventure with <strong>Bala Cinema</strong></p>', unsafe_allow_html=True)
# st.write("A movie recommendation system by Bala Cinema")

# # Login/Registration
# auth_choice = st.selectbox("Login / Register", ["Login", "Register"])
# username = st.text_input("Username")
# password = st.text_input("Password", type='password')

# if auth_choice == "Register":
#     if st.button("Register", key="register_button"):
#         hashed_pw = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
#         try:
#             c.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_pw))
#             conn.commit()
#             st.success("User registered successfully!")
#         except sqlite3.IntegrityError:
#             st.error("Username already exists!")
# elif auth_choice == "Login":
#     if st.button("Login", key="login_button"):
#         user = c.execute("SELECT * FROM users WHERE username=?", (username,)).fetchone()
#         if user:
#             if bcrypt.checkpw(password.encode('utf-8'), user[2]):
#                 st.success("Login successful!")
#                 user_id = user[0]
#                 # Set a session state to remember the user ID
#                 st.session_state.user_id = user_id
#             else:
#                 st.error("Invalid password!")
#         else:
#             st.error("User not found!")

# # At the top of your script
# if 'user_id' not in st.session_state:
#     st.session_state.user_id = None

# # Modify the login section
# if auth_choice == "Login":
#     if st.button("Login", key="login_button_2"):
#         user = c.execute("SELECT * FROM users WHERE username=?", (username,)).fetchone()
#         if user and bcrypt.checkpw(password.encode('utf-8'), user[2]):
#             st.success("Login successful!")
#             st.session_state.user_id = user[0]  # Store user ID in session state
#         else:
#             st.error("Invalid credentials!")

# # Add this check before showing recommendations
# if st.session_state.user_id:
#     user_id = st.session_state.user_id
#     # Show personalized recommendations
#     st.write("Based on your watch history, you might like these:")
#     names, posters = recommend_based_on_history(user_id)
#     if names:
#         for idx, (name, poster) in enumerate(zip(names, posters), start=1):
#             st.markdown(f"**MOVIE {idx}:** {name}")
#             st.image(poster, width=200)
#     else:
#         st.write("No watch history found. Search for a movie to get recommendations!")

# # Select a movie for recommendations
# selected_movie_name = st.selectbox(
#     'Choose a reference movie to get started:',
#     movies['title'].values
# )

# # Helper functions
# def format_list(data):
#     if isinstance(data, list):
#         return ' '.join(data)
#     return data

# def format_rating(rating):
#     if isinstance(rating, list):
#         try:
#             return float(''.join(rating))
#         except ValueError:
#             return 0.0
#     return rating

# def format_runtime(runtime):
#     if isinstance(runtime, list):
#         try:
#             return int(''.join(runtime).split('.')[0])
#         except ValueError:
#             return 0
#     return runtime

# def format_date(date):
#     if isinstance(date, list):
#         return ''.join(date)
#     return date

# def format_description(description):
#     if isinstance(description, list):
#         return ' '.join(description)
#     return description

# def simulate_loading():
#     with st.spinner('Fetching recommendations...'):
#         time.sleep(1.5)  # Simulate loading time
#     st.success('Recommendations fetched successfully!')

# # Add movie to user history
# if 'user_id' in locals():  # Check if user_id exists
#     if st.button("Add to Watch History", key="add_to_history"):
#         movie_id = movies[movies['title'] == selected_movie_name].iloc[0].movie_id
#         try:
#             c.execute("INSERT INTO watch_history (user_id, movie_id) VALUES (?, ?)", (user_id, movie_id))
#             conn.commit()
#             st.success(f"{selected_movie_name} added to your watch history!")
#         except sqlite3.IntegrityError:
#             st.error(f"Movie '{selected_movie_name}' already exists in your watch history!")

# # Inside the 'Show me recommendations!' button
# if st.button("Show me recommendations!", key="show_recommendations"):
#     if selected_movie_name:
#         simulate_loading()
#         recommended_movies, recommended_posters = hybrid_recommend(selected_movie_name, user_id)
#         if recommended_movies:
#             st.write("Here are some recommendations:")
#             for idx, (name, poster) in enumerate(zip(recommended_movies, recommended_posters), start=1):
#                 st.markdown(f"**Recommended Movie {idx}:** {name}")
#                 st.image(poster, width=200)
#         else:
#             st.write("No recommendations found.")


import pandas as pd
import streamlit as st
import pickle
import requests
import time
import sqlite3
import bcrypt

# Create a connection to the database
conn = sqlite3.connect('movie_recommendation.db', check_same_thread=False)
c = conn.cursor()

# Create users, watch_history, and ratings tables if they do not exist
c.execute('''CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE,
                password TEXT)''')

c.execute('''CREATE TABLE IF NOT EXISTS watch_history (
                user_id INTEGER,
                movie_id INTEGER,
                FOREIGN KEY(user_id) REFERENCES users(user_id))''')

c.execute('''CREATE TABLE IF NOT EXISTS ratings (
                user_id INTEGER,
                movie_id INTEGER,
                rating REAL,
                FOREIGN KEY(user_id) REFERENCES users(user_id),
                FOREIGN KEY(movie_id) REFERENCES watch_history(movie_id))''')
conn.commit()

# Function to fetch movie poster
def fetch_poster(movie_id):
    response = requests.get(f'https://api.themoviedb.org/3/movie/{movie_id}?api_key=YOUR_API_KEY&language=en-US')
    
    # Check if the response is successful
    if response.status_code != 200:
        st.error(f"Error fetching data for movie ID {movie_id}. Status code: {response.status_code}")
        return None
    
    data = response.json()
    
    # Check for the 'poster_path' key in the response
    if 'poster_path' in data and data['poster_path']:
        return "https://image.tmdb.org/t/p/w500/" + data['poster_path']
    else:
        return "https://via.placeholder.com/200"  # Placeholder image URL

# Function to recommend movies
def recommend(movie):
    movie_index = movies[movies['title'] == movie].index[0]
    distances = similarity[movie_index]
    movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]

    recommended_movies = []
    recommended_movies_posters = []
    for x in movies_list:
        movie_id = movies.iloc[x[0]].movie_id
        recommended_movies.append(movies.iloc[x[0]].title)
        poster = fetch_poster(movie_id)
        
        if poster:  # Only append if a valid poster URL is returned
            recommended_movies_posters.append(poster)
        else:
            recommended_movies_posters.append("https://via.placeholder.com/200")  # Use a placeholder image URL

    return recommended_movies, recommended_movies_posters

# Function to get recommendations based on user history
def recommend_based_on_history(user_id):
    watched_movie_ids = []
    for row in c.execute('SELECT movie_id FROM watch_history WHERE user_id=?', (user_id,)):
        watched_movie_ids.append(row[0])

    if not watched_movie_ids:
        return [], []

    recommended_movies, recommended_movies_posters = [], []
    for movie_id in watched_movie_ids:
        if movie_id in movies['movie_id'].values:
            movie_title = movies[movies['movie_id'] == movie_id]['title'].values[0]
            names, posters = recommend(movie_title)
            recommended_movies.extend(names)
            recommended_movies_posters.extend(posters)

    return recommended_movies[:5], recommended_movies_posters[:5]

# Function to add user rating
def add_rating(user_id, movie_id, rating):
    c.execute("INSERT INTO ratings (user_id, movie_id, rating) VALUES (?, ?, ?)", (user_id, movie_id, rating))
    conn.commit()

# Load movies and similarity matrices
movies_dict = pickle.load(open('movie_dict_4.pkl', 'rb'))
movies = pd.DataFrame(movies_dict)
similarity = pickle.load(open('similarity_4.pkl', 'rb'))

# Streamlit UI components
st.title('üé¨ Welcome to Bala Cinema! üçø')
st.markdown('<p style="font-size:20px; font-style: italic;">Discover your next movie adventure with <strong>Bala Cinema</strong></p>', unsafe_allow_html=True)
st.write("A movie recommendation system by Bala Cinema")

# At the top of your script
if 'user_id' not in st.session_state:
    st.session_state.user_id = None

# Login/Registration
auth_choice = st.selectbox("Login / Register", ["Login", "Register"])
username = st.text_input("Username")
password = st.text_input("Password", type='password')

if auth_choice == "Register":
    if st.button("Register", key="register_button"):
        hashed_pw = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
        try:
            c.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_pw))
            conn.commit()
            st.success("User registered successfully!")
        except sqlite3.IntegrityError:
            st.error("Username already exists!")
elif auth_choice == "Login":
    if st.button("Login", key="login_button"):
        user = c.execute("SELECT * FROM users WHERE username=?", (username,)).fetchone()
        if user:
            if bcrypt.checkpw(password.encode('utf-8'), user[2]):
                st.success("Login successful!")
                st.session_state.user_id = user[0]  # Store user ID in session state
            else:
                st.error("Invalid password!")
        else:
            st.error("User not found!")

# Check if user is logged in
if st.session_state.user_id:
    user_id = st.session_state.user_id
    # Show personalized recommendations
    st.write("Based on your watch history, you might like these:")
    names, posters = recommend_based_on_history(user_id)
    if names:
        for idx, (name, poster) in enumerate(zip(names, posters), start=1):
            st.markdown(f"**MOVIE {idx}:** {name}")
            st.image(poster, width=200)
    else:
        st.write("You have no watch history yet. Start by searching for a movie to get recommendations!")

    # Display current watch history
    st.write("Your current watch history:")
    watch_history = c.execute('SELECT movie_id FROM watch_history WHERE user_id=?', (user_id,)).fetchall()

    if watch_history:
        for wh in watch_history:
            movie_id = wh[0]  # Directly use the movie ID
            if movie_id in movies['movie_id'].values:  # Check if movie_id exists in movies DataFrame
                movie_title = movies[movies['movie_id'] == movie_id]['title'].values[0]
                st.markdown(f"- {movie_title}")
            else:
                st.warning(f"Movie ID {movie_id} not found in movie database.")
    else:
        st.write("No movies in your watch history.")

    # Select a movie for recommendations
    selected_movie_name = st.selectbox(
        'Choose a reference movie to get started:',
        movies['title'].values
    )

    def simulate_loading():
        with st.spinner('Fetching recommendations...'):
            time.sleep(1.5)  # Simulate loading time
        st.success('Recommendations fetched successfully!')

    # Add movie to user history
    if st.session_state.user_id:
        user_id = st.session_state.user_id

    # Add to watch history
    if st.button("Add to Watch History"):
        movie_id = movies[movies['title'] == selected_movie_name].iloc[0].movie_id
        try:
            # Insert into watch history as integer
            c.execute("INSERT INTO watch_history (user_id, movie_id) VALUES (?, ?)", (user_id, int(movie_id)))
            conn.commit()
            st.success(f"{selected_movie_name} added to your watch history!")
        except sqlite3.IntegrityError:
            st.error(f"Movie '{selected_movie_name}' already exists in your watch history!")

    # Inside the 'Show me recommendations!' button click handler
    if st.button('Show me recommendations!'):
        simulate_loading()
        names, posters = hybrid_recommend(selected_movie_name, user_id)
        st.write('Here are some movies you might enjoy:')
        st.markdown(f'### Recommended Movies based on *{selected_movie_name}*:')

        for idx, (name, poster) in enumerate(zip(names, posters), start=1):
            st.markdown(f"**MOVIE {idx}:** {name}")
            st.image(poster, width=200)

    # Rate a movie
    rating_movie = st.selectbox("Select a movie to rate:", movies['title'].values)
    rating_value = st.slider("Rate this movie (1 to 5)", 1, 5)

    if st.button("Submit Rating"):
        movie_id = movies[movies['title'] == rating_movie].iloc[0].movie_id
        add_rating(user_id, movie_id, rating_value)
        st.success("Rating submitted!")

# Close the database connection
conn.close()
